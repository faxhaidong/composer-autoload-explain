<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit317f87690cc672424675c654df64f31c
{
    private static $loader;
    
    //引入自动加载核心文件
    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }
    
    //注册自动加载函数
    public static function getLoader()
    {
        //实现自动加载单例
        if (null !== self::$loader) {
            return self::$loader;
        }
        
        //将自动加载函数注册到SPL __autoload函数队列中，置于队首
        spl_autoload_register(array('ComposerAutoloaderInit317f87690cc672424675c654df64f31c', 'loadClassLoader'), true, true);
        
        //实例化自动加载类，以备调用
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        
        //从__autoload函数队列中注销
        spl_autoload_unregister(array('ComposerAutoloaderInit317f87690cc672424675c654df64f31c', 'loadClassLoader'));
        
        //PHP版本大于5.6，未定义HHVM_VERSION常亮，不在zend环境
        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());

        if ($useStaticLoader) {
            //该文件映射了包括(classmap,files,psr4,psr0)的对应关系,相当于else分支中的运算结果进行存贮
            require_once __DIR__ . '/autoload_static.php';
            
            //执行自动加载类的初始化方法
            call_user_func(\Composer\Autoload\ComposerStaticInit317f87690cc672424675c654df64f31c::getInitializer($loader));
        } else {
            //设置单独namespace和文件目录的映射关系
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }
            
            //设置符合psr4命名规则的namespace和文件目录的映射关系
            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            //加载类和类文件位置的映射关系
            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }
        
        //注册自动加载方法
        $loader->register(true);
        
        //设置需要引入的函数文件
        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit317f87690cc672424675c654df64f31c::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }

        //循环引入文件
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire317f87690cc672424675c654df64f31c($fileIdentifier, $file);
        }

        return $loader;
    }
}

function composerRequire317f87690cc672424675c654df64f31c($fileIdentifier, $file)
{
    //设置全局变量，防止重复引入
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
